
fn main() {
    let ans = solve_both(INPUT);
    println!("1: {}\n2: {}", ans.0, ans.1);
}

fn solve_both(s: &str) -> (u32, u32) {
    let bytes = s.as_bytes().iter().map(|&b| b - '0' as u8).collect::<Vec<_>>();
    let len = bytes.len();

    bytes.iter()
        .enumerate()
        .fold((0,0), |(mut acc1, mut acc2), (i, &b)| {
            if b == bytes[(i+1) % len] {
                acc1 += b as u32;
            }
            if b == bytes[(i + len/2) % len] {
                acc2 += b as u32;
            }
            (acc1, acc2)
        })
}

static INPUT: &'static str =
    "89219596999173583791527386872954869423796749511541239937319456252694758533\
    723379356827826527919988319716763479129317798615256623671833261753648723687\
    974716799998336383225791244575688731487922992586447776135713985554852251379\
    889985389661238714668771626459994328941632672725652517395386153424497946658\
    789542939915992491636447631957389556679539336841167238726361558212837767629\
    361289272376223719114671428623354351441181332319799595385487162822535854351\
    415786737226571872427691169951497145884484934972627632913511824315569827121\
    884434738745734365644638179929689322225619848446587371431177793742116158179\
    818955414147423623944761242188323217391418373212633283819464858347241915436\
    995247742266638951756994442846461745712436934924247961242267324136177757646\
    694662293224372855127328483793449751111433442148626224498291473445211394636\
    124537735184981558485569177889479821982246329838777192332933763439465443945\
    856423325945145334531675324143826773943922549751527652242444153246254152819\
    578281832691856224727849649576443538666738357754338518682726973226122315682\
    435116484164842456492519878362572139698898448155839186648395553397221216469\
    389895541271916164841127914941344319289686425821549854382745843887135587933\
    689272167593711195247918349698282516345628274767836461213559637353344771986\
    738466751657226212422558562397427883398136549462864661458811414747355913885\
    345318944862497677464192246918394285769598637642894487685149791444387351386\
    231948418178759357298744466976793952629442453126299956494857114234274112986\
    231131131316679836344274579289622764288189313449815155232664793368959651685\
    934224224458471481877379156718732221716434785284375187597941519816562753426\
    352782841454921723432236193778518517499325675348387637833252182451597717339\
    753578423692362963671346915152639914954832284983143152621947865386175436415\
    527586551164392324985858946614247476377841382682922666339846756955574726719\
    512952513891756178543644985593395153897399588195452112475336922389831284373\
    477153234238328298742233419658512852652632429177768968949234623178633585155\
    1413876834969878";
